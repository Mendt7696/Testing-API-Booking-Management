{
	"info": {
		"_postman_id": "b3b5dba2-e667-4531-87ca-e862595a77bb",
		"name": "Booking Management(MenDt)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32029911"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Auth - Create Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response_Auth = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Access_token\", response_Auth.token);\r",
									"console.log(response_Auth);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"username\" : \"admin\",\r\n\"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/auth",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create new booking& view",
			"item": [
				{
					"name": "Create New Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"DataFirstName\", \"Sang\");\r",
									"pm.collectionVariables.set(\"DataLastName\", \"Chi\");\r",
									"pm.collectionVariables.set(\"DataTotalPrice\", 3300);\r",
									"pm.collectionVariables.set(\"DataDepositPaid\",true);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert status code 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Actual Results\r",
									"const getResponse = pm.response.json();\r",
									"//console.log(getResponse);\r",
									"\r",
									"// Lấy giá trị FirstName từ Response\r",
									"const firstName_Actual = getResponse.booking.firstname;\r",
									"//In ra FirstName từ giá trị lấy được\r",
									"console.log(\"FirstName :\", firstName_Actual);\r",
									"\r",
									"const lastName_Actual = getResponse.booking.lastname;\r",
									"console.log(\"FirstName :\", lastName_Actual);\r",
									"\r",
									"const totalPrice_Actual = getResponse.booking.totalprice;\r",
									"console.log(\"totalprice: \",totalPrice_Actual);\r",
									"\r",
									"//Expected Rusults\r",
									"const firstName_Exp = pm.variables.get(\"DataFirstName\");\r",
									"const lastname_Exp = pm.variables.get(\"DataLastName\");\r",
									"const totalprice_Exp = pm.variables.get(\"DataTotalPrice\");\r",
									"\r",
									"//Assert giá trị FirstName lấy được có đúng không?\r",
									"pm.test(\"Firstname is correct\", function () {\r",
									"    pm.expect(firstName_Actual).to.eql(firstName_Exp);\r",
									"});\r",
									"\r",
									"pm.test(\"Lastname is correct\", function () {\r",
									"    pm.expect(lastName_Actual).to.eql(lastname_Exp);\r",
									"});\r",
									"\r",
									"pm.test(\"totalprice is correct\", function () {\r",
									"    pm.expect(totalPrice_Actual).to.eql(totalprice_Exp);\r",
									"});\r",
									"\r",
									"// Set Booking variable \r",
									"const bookingID = getResponse.bookingid;\r",
									"pm.collectionVariables.set(\"BookingID\", bookingID);\r",
									"console.log(bookingID);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"{{DataFirstName}}\",\r\n\"lastname\" : \"{{DataLastName}}\",\r\n\"totalprice\" : {{DataTotalPrice}},\r\n\"depositpaid\" : {{DataDepositPaid}},\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2018-01-01\",\r\n\"checkout\" : \"2019-01-01\"\r\n},\r\n\"additionalneeds\" : \"Include Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response contains Booking ID that has just created\", function () {\r",
									"\r",
									"    const take_BookingID = pm.variables.get(\"BookingID\");\r",
									"    console.log(take_BookingID);\r",
									"    pm.expect(pm.response.text()).to.include(take_BookingID);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BookingURL}}/booking",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Booking",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking/{{BookingID}}",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking",
								"{{BookingID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update a booking & view",
			"item": [
				{
					"name": "Auth - Access Token Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response_Auth = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Access_token\", response_Auth.token);\r",
									"console.log(response_Auth);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"username\" : \"admin\",\r\n\"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/auth",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Booking_Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"DataFirstName\", \"Linh\");\r",
									"pm.collectionVariables.set(\"DataLastName\", \"Hoang Chi\");\r",
									"pm.collectionVariables.set(\"DataTotalPrice\", \"550\");\r",
									"pm.collectionVariables.set(\"DataDepositPaid\",true);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert status code 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Actual Results\r",
									"const getResponse = pm.response.json();\r",
									"//console.log(getResponse);\r",
									"\r",
									"// Lấy giá trị FirstName từ Response\r",
									"const firstName_Actual = getResponse.booking.firstname;\r",
									"//In ra FirstName từ giá trị lấy được\r",
									"console.log(\"FirstName :\", firstName_Actual);\r",
									"\r",
									"const lastName_Actual = getResponse.booking.lastname;\r",
									"console.log(\"FirstName :\", lastName_Actual);\r",
									"\r",
									"const totalPrice_Actual = getResponse.booking.totalprice;\r",
									"console.log(\"totalprice: \",totalPrice_Actual);\r",
									"\r",
									"const depositPaid_Actual = ((getResponse.booking.depositPaid)===\"true\");\r",
									"console.log(\"DepositPaid: \",depositPaid_Actual);\r",
									"\r",
									"//Expected Rusults\r",
									"const firstName_Exp = pm.variables.get(\"DataFirstName\");\r",
									"const lastname_Exp = pm.variables.get(\"DataLastName\");\r",
									"const totalprice_Exp = parseInt(pm.variables.get(\"DataTotalPrice\"));\r",
									"const despositPaid_Exp = (parseInt(pm.variables.get(\"DataDepositPaid\")) === \"true\");\r",
									"\r",
									"//Assert giá trị FirstName lấy được có đúng không?\r",
									"pm.test(\"Firstname is correct\", function () {\r",
									"    pm.expect(firstName_Actual).to.eql(firstName_Exp);\r",
									"});\r",
									"\r",
									"pm.test(\"Lastname is correct\", function () {\r",
									"    pm.expect(lastName_Actual).to.eql(lastname_Exp);\r",
									"});\r",
									"\r",
									"pm.test(\"totalprice is correct\", function () {\r",
									"    pm.expect(totalPrice_Actual).to.eql(totalprice_Exp);\r",
									"    pm.expect(depositPaid_Actual).to.eql(despositPaid_Exp);\r",
									"});\r",
									"\r",
									"// Set Booking Collection variable \r",
									"const bookingID = getResponse.bookingid;\r",
									"pm.collectionVariables.set(\"BookingID_Update\", bookingID);\r",
									"console.log(bookingID);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"{{DataFirstName}}\",\r\n\"lastname\" : \"{{DataLastName}}\",\r\n\"totalprice\" : {{DataTotalPrice}},\r\n\"depositpaid\" : {{DataDepositPaid}},\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2018-01-01\",\r\n\"checkout\" : \"2019-01-01\"\r\n},\r\n\"additionalneeds\" : \"Include Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"Replace_firstname\", \"Tuan Phong\");\r",
									"pm.collectionVariables.set(\"Replace_lastname\", \"Vu\");\r",
									"pm.collectionVariables.set(\"Replace_totalprice\",\"350\");\r",
									"pm.collectionVariables.set(\"Replace_depositpaid\", true);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response_UpdateBooking = pm.response.json();\r",
									"//Actual Result\r",
									"const actual_Firstname_UD = response_UpdateBooking.firstname;\r",
									"const actual_Lastname_UD = response_UpdateBooking.lastname;\r",
									"const actual_Totalprice_UD = parseInt(response_UpdateBooking.totalprice);\r",
									"const actual_Depositpaid_UD = ((response_UpdateBooking.depositpaid) === \"true\");\r",
									"\r",
									"//Expect Result\r",
									"const exp_Firstname_UD = pm.variables.get(\"Replace_firstname\");\r",
									"const exp_Lastname_UD = pm.variables.get(\"Replace_lastname\");\r",
									"const exp_Totalprice_UD = parseInt(pm.variables.get(\"Replace_totalprice\"));\r",
									"const exp_Depositpaid_UD =  (pm.variables.get(\"Replace_depositpaid\") === \"true\");\r",
									"\r",
									"pm.test(\"Check UpdateBooking is correct\", function () {\r",
									"    pm.expect(actual_Firstname_UD).to.eql(exp_Firstname_UD);\r",
									"    pm.expect(actual_Lastname_UD).to.eql(exp_Lastname_UD);\r",
									"    pm.expect(actual_Totalprice_UD).to.eql(exp_Totalprice_UD);\r",
									"    pm.expect(actual_Depositpaid_UD).to.eql(exp_Depositpaid_UD);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Cookie",
								"value": "token= {{Access_token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{Access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"{{Replace_firstname}}\",\r\n\"lastname\" : \"{{Replace_lastname}}\",\r\n\"totalprice\" : {{Replace_totalprice}},\r\n\"depositpaid\" : {{Replace_depositpaid}},\r\n\"bookingdates\" :\r\n {\"checkin\" : \"2018-01-01\",\r\n\"checkout\" : \"2019-01-01\"\r\n},\r\n\"additionalneeds\" : \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking/{{BookingID_Update}}",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking",
								"{{BookingID_Update}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Booking_Update",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking/{{BookingID_Update}}",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking",
								"{{BookingID_Update}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete a Booking & view",
			"item": [
				{
					"name": "Auth - Access Token Login Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const response_Auth = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"Access_token\", response_Auth.token);\r",
									"console.log(response_Auth);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"username\" : \"admin\",\r\n\"password\" : \"password123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/auth",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Booking After Delete",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"DataFirstName\", \"Jenny\");\r",
									"pm.collectionVariables.set(\"DataLastName\", \"Do\");\r",
									"pm.collectionVariables.set(\"DataTotalPrice\", 2000);\r",
									"pm.collectionVariables.set(\"DataDepositPaid\",true);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert status code 200 OK\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Actual Results\r",
									"const getResponse = pm.response.json();\r",
									"//console.log(getResponse);\r",
									"\r",
									"// Lấy giá trị FirstName từ Response\r",
									"const firstName_Actual = getResponse.booking.firstname;\r",
									"//In ra FirstName từ giá trị lấy được\r",
									"console.log(\"FirstName :\", firstName_Actual);\r",
									"\r",
									"const lastName_Actual = getResponse.booking.lastname;\r",
									"console.log(\"FirstName :\", lastName_Actual);\r",
									"\r",
									"const totalPrice_Actual = getResponse.booking.totalprice;\r",
									"console.log(\"totalprice: \",totalPrice_Actual);\r",
									"\r",
									"//Expected Rusults\r",
									"const firstName_Exp = pm.variables.get(\"DataFirstName\");\r",
									"const lastname_Exp = pm.variables.get(\"DataLastName\");\r",
									"const totalprice_Exp = pm.variables.get(\"DataTotalPrice\");\r",
									"\r",
									"//Assert giá trị FirstName lấy được có đúng không?\r",
									"pm.test(\"Firstname is correct\", function () {\r",
									"    pm.expect(firstName_Actual).to.eql(firstName_Exp);\r",
									"});\r",
									"\r",
									"pm.test(\"Lastname is correct\", function () {\r",
									"    pm.expect(lastName_Actual).to.eql(lastname_Exp);\r",
									"});\r",
									"\r",
									"pm.test(\"totalprice is correct\", function () {\r",
									"    pm.expect(totalPrice_Actual).to.eql(totalprice_Exp);\r",
									"});\r",
									"\r",
									"// Set Booking variable \r",
									"const bookingID2 = getResponse.bookingid;\r",
									"pm.collectionVariables.set(\"BookingID2\", bookingID2);\r",
									"console.log(bookingID2);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"{{DataFirstName}}\",\r\n\"lastname\" : \"{{DataLastName}}\",\r\n\"totalprice\" : {{DataTotalPrice}},\r\n\"depositpaid\" : {{DataDepositPaid}},\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2018-01-01\",\r\n\"checkout\" : \"2019-01-01\"\r\n},\r\n\"additionalneeds\" : \"Include Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token= {{Access_token}}",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{Access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking/{{BookingID2}}",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking",
								"{{BookingID2}}"
							],
							"query": [
								{
									"key": "",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Booking_Deleted",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking/{{BookingID2}}",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking",
								"{{BookingID2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation_Create Booking",
			"item": [
				{
					"name": "Validate Create New Booking",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const statusCode = pm.iterationData.get(\"statuscode\");\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"//Get Actual Response\r",
									"const actual_response = pm.response.json();\r",
									"const actual_firstname = actual_response.booking.firstname;\r",
									"const actual_lastname = actual_response.booking.lastname;\r",
									"const actual_totalprice = actual_response.booking.totalprice;\r",
									"const actual_depositpaid = actual_response.booking.depositpaid;\r",
									"\r",
									"//Get Expect Response from CSV file\r",
									"const expect_firstname = pm.iterationData.get(\"Firstname\"); \r",
									"const expect_lastname = pm.iterationData.get(\"Lastname\"); \r",
									"const expect_totalprice = pm.iterationData.get(\"Totalprice\"); \r",
									"const expect_depositpaid = pm.iterationData.get(\"DepositPaid\"); \r",
									"\r",
									"//Compare Response\r",
									"pm.test(\"Compare response exactly\", function () {\r",
									"   \r",
									"    pm.expect(actual_firstname).to.eql(expect_firstname);\r",
									"    pm.expect(actual_lastname).to.eql(expect_lastname);\r",
									"    pm.expect(actual_totalprice).to.eql(expect_totalprice);\r",
									"    pm.expect(actual_depositpaid).to.eql(expect_depositpaid);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"{{Firstname}}\",\r\n\"lastname\" : \"{{Lastname}}\",\r\n\"totalprice\" : {{Totalprice}},\r\n\"depositpaid\" : {{DepositPaid}},\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2018-01-01\",\r\n\"checkout\" : \"2019-01-01\"\r\n},\r\n\"additionalneeds\" : \"Include Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation_Create Booking_If else",
			"item": [
				{
					"name": "Validate Create New Booking If-Else",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if(pm.response.code == 200){\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    const statusCode = pm.iterationData.get(\"statuscode\");\r",
									"    pm.response.to.have.status(statusCode);\r",
									"});\r",
									"\r",
									"//Get Actual Response\r",
									"const actual_response = pm.response.json();\r",
									"const actual_firstname = actual_response.booking.firstname;\r",
									"const actual_lastname = actual_response.booking.lastname;\r",
									"const actual_totalprice = actual_response.booking.totalprice;\r",
									"const actual_depositpaid = actual_response.booking.depositpaid;\r",
									"\r",
									"//Get Expect Response from CSV file\r",
									"const expect_firstname = pm.iterationData.get(\"Firstname\"); \r",
									"const expect_lastname = pm.iterationData.get(\"Lastname\"); \r",
									"const expect_totalprice = pm.iterationData.get(\"Totalprice\"); \r",
									"const expect_depositpaid = pm.iterationData.get(\"DepositPaid\"); \r",
									"\r",
									"//Compare Response\r",
									"pm.test(\"Compare response exactly\", function () {\r",
									"   \r",
									"    pm.expect(actual_firstname).to.eql(expect_firstname);\r",
									"    pm.expect(actual_lastname).to.eql(expect_lastname);\r",
									"    pm.expect(actual_totalprice).to.eql(expect_totalprice);\r",
									"    pm.expect(actual_depositpaid).to.eql(expect_depositpaid);\r",
									"});\r",
									"}else{\r",
									"\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        const status_error = pm.iterationData.get(\"statuscode\");\r",
									"        pm.response.to.have.status(status_error);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"firstname\" : \"{{Firstname}}\",\r\n\"lastname\" : \"{{Lastname}}\",\r\n\"totalprice\" : {{Totalprice}},\r\n\"depositpaid\" : {{DepositPaid}},\r\n\"bookingdates\" : {\r\n\"checkin\" : \"2018-01-01\",\r\n\"checkout\" : \"2019-01-01\"\r\n},\r\n\"additionalneeds\" : \"Include Breakfast\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BookingURL}}/booking",
							"host": [
								"{{BookingURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "DataFirstName",
			"value": ""
		},
		{
			"key": "DataLastName",
			"value": ""
		},
		{
			"key": "DataTotalPrice",
			"value": ""
		},
		{
			"key": "DataDepositPaid",
			"value": ""
		},
		{
			"key": "BookingID",
			"value": ""
		},
		{
			"key": "Replace_firstname",
			"value": ""
		},
		{
			"key": "Replace_lastname",
			"value": ""
		},
		{
			"key": "Replace_totalprice",
			"value": ""
		},
		{
			"key": "Replace_depositpaid",
			"value": ""
		},
		{
			"key": "BookingID_Update",
			"value": ""
		},
		{
			"key": "Access_token",
			"value": ""
		},
		{
			"key": "BookingID2",
			"value": ""
		}
	]
}